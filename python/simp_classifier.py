# -*- coding: utf-8 -*-
"""seminar05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS5IMFYVkzTW4BIAcSjr-mc5Vz9VYRod
"""

!wget https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz

import numpy as np
import matplotlib.pyplot as plt


def load_data(path='mnist.npz'): 
    with np.load(path, allow_pickle=True) as f:  # pylint: disable=unexpected-keyword-arg
        x_train, y_train = f['x_train'], f['y_train']
        x_test, y_test = f['x_test'], f['y_test']

    return (x_train, y_train), (x_test, y_test)

# файл может быть скачан по ссылке https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
(x_train, y_train), (x_test, y_test) = load_data(path='mnist.npz')
print(x_train.shape, y_train.shape)

index = 9999
print('label is %d' % y_test[index])
plt.imshow(x_test[index])
plt.show()

from matplotlib.rcsetup import validate_markevery
class MyFirstClassifier(object):
    def __init__(self):
        pass
    def fit(self, x_train, y_train):
      x_train_bin = (x_train > 128).astype('int')
      lengths = np.sum(x_train_bin,axis=(1,2))
      val_av = []
      ind = []
      for i in range(10):
        ind.append(i)
        val_av.append(np.mean(lengths[y_train==i]))
      averrage = sorted([(ind[i],val_av[i]) for i in range(len(ind))], key = lambda x: x[1])
    def predict(self, x_test):
      res = []
      x_test_bin =  (x_test > 128).astype('int')
      lengths_answer = np.sum(x_test_bin,axis=(1,2))
      print(len(lengths_answer))
      for i in range(len(lengths_answer)):
        if lengths_answer[i] < 70:
          res.append(1)
        elif lengths_answer[i] < 95:
          res.append(7)
        elif lengths_answer[i] < 118:
          res.append(9)
        elif lengths_answer[i] > 135:
          res.append(0)
        else:
          res.append(8)
      return res
       
    
def accuracy_score(pred, gt):
    return np.mean(pred==gt)

cls = MyFirstClassifier()
cls.fit(x_train, y_train)
pred = cls.predict(x_test)

print('accuracy is %.4f' % accuracy_score(pred, y_test))

"""[(1, 59.43918718481163, 28.170572530406407, 31.26861465440522), -3 75
(7, 89.59409417398244, 49.00287310454908, 40.59122106943336), 9
 (4, 94.84679904142418, 41.29116740842177, 53.5556316330024), -12
 (9, 96.20961506135485, 47.74348630021852, 48.466128761136325),-1 100
  (5, 100.84154215089467, 49.59269507470946, 51.24884707618521), -
  (6, 107.85856708347414, 42.54173707333559, 65.31683001013856), -23
  (3, 111.01467949763497, 54.40548034578372, 56.60919915185125), -2  110
  (2, 116.73229271567641, 47.57552870090635, 69.15676401477006),  -22
   (8, 118.32575628097761, 58.002734575286276, 60.32302170569133), -2 120
   (0, 135.83960830660138, 65.16680736113456, 70.67280094546682)] -5
"""

class MyFirstClassifier(object):
    def init(self):
        pass
    def fit(self, x_train, y_train):
      x_train_bin = (x_train > 128).astype('int')
      lengths_top = np.zeros(len(x_train_bin))
      lengths_bottom = np.zeros(len(x_train_bin))
      lengths = np.sum(x_train_bin,axis=(1,2))
      for i in range(len(x_train_bin)):
        current = np.sum(x_train_bin[i],axis=(1))
        lengths_top[i] = sum(current[i] for i in range(14))
        lengths_bottom[i] = sum(current[i] for i in range(14,28))

      val = []
      val_top = []
      val_bottom = []
      ind = []
      for i in range(10):
        ind.append(i)
        val.append(np.mean(lengths[y_train==i]))
        val_top.append(np.mean(lengths_top[y_train==i]))
        val_bottom.append(np.mean(lengths_bottom[y_train==i]))
      averrage = sorted([(ind[i],val[i], val_top[i], val_bottom[i]) for i in range(len(ind))], key = lambda x: x[1])
      print(averrage)
    def predict(self, x_test):
      res =  np.zeros(len(y_test))
      x_test_bin = (x_train > 128).astype('int')
      lengths_top_ans = np.zeros(len(x_test_bin))
      lengths_bottom_ans = np.zeros(len(x_test_bin))
      lengths_ans = np.sum(x_test_bin,axis=(1,2))
      for i in range(len(x_test_bin)):
        current = np.sum(x_test_bin[i],axis=(1))
        lengths_top_ans[i] = sum(current[i] for i in range(14))
        lengths_bottom_ans[i] = sum(current[i] for i in range(14,28))
      for i in range(len(lengths_ans)):
        if lengths_top_ans[i]-lengths_bottom_ans[i] > 5:
          res[i] = 7 
        if lengths_ans[i] < 90:
           res[i] = 1
        elif lengths_ans[i] > 120:
           res[i] = 0
        elif -5 < lengths_top_ans[i]-lengths_bottom_ans[i] < -5:
          if lengths_ans[i] < 110:
            res[i] = 3
          else:
            res[i] = 0
        elif lengths_top_ans[i]-lengths_bottom_ans[i] >= 5:
          res[i] = 7
        elif lengths_top_ans[i]-lengths_bottom_ans[i] >= -16:
          res[i] = 4
        else:
          res[i] = 6
      return res

for i in range(10):
  print(i, np.sum(y_test == i))

"""#### Задача

Реализовать собственный классификатор с точностью не менее 20%
"""